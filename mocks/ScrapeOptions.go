// Code generated by mockery v2.34.1. DO NOT EDIT.

package mocks_test

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// ScrapeOptions is an autogenerated mock type for the ScrapeOptions type
type ScrapeOptions struct {
	mock.Mock
}

type ScrapeOptions_Expecter struct {
	mock *mock.Mock
}

func (_m *ScrapeOptions) EXPECT() *ScrapeOptions_Expecter {
	return &ScrapeOptions_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: values
func (_m *ScrapeOptions) Execute(values url.Values) {
	_m.Called(values)
}

// ScrapeOptions_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ScrapeOptions_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - values url.Values
func (_e *ScrapeOptions_Expecter) Execute(values interface{}) *ScrapeOptions_Execute_Call {
	return &ScrapeOptions_Execute_Call{Call: _e.mock.On("Execute", values)}
}

func (_c *ScrapeOptions_Execute_Call) Run(run func(values url.Values)) *ScrapeOptions_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(url.Values))
	})
	return _c
}

func (_c *ScrapeOptions_Execute_Call) Return() *ScrapeOptions_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *ScrapeOptions_Execute_Call) RunAndReturn(run func(url.Values)) *ScrapeOptions_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewScrapeOptions creates a new instance of ScrapeOptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScrapeOptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScrapeOptions {
	mock := &ScrapeOptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
